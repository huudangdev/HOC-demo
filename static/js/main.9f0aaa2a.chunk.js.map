{"version":3,"sources":["components/HOC/Loading.js","components/FeedItem.js","components/Feed.js","App.js","serviceWorker.js","index.js"],"names":["isEmpty","prop","undefined","hasOwnProperty","length","constructor","Object","keys","FeedItem","contacts","className","map","contact","key","email","src","thumbnail","role","alt","name","Loading","loadingProp","WrappedComponent","this","startTimer","Date","now","nextProps","endTimer","myProps","loadingTime","toFixed","props","Component","App","useState","setContacts","useEffect","a","fetch","then","response","json","parsedResponse","results","user","first","last","picture","fetchDataUsers","class","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAGMA,G,MAAU,SAAAC,GAAI,OACT,OAATA,QACSC,IAATD,GACCA,EAAKE,eAAe,WAA6B,IAAhBF,EAAKG,QACtCH,EAAKI,cAAgBC,QAAuC,IAA7BA,OAAOC,KAAKN,GAAMG,SCmBrCI,EAxBE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACf,OACI,yBAAKC,UAAU,qBACVD,EAASE,IAAI,SAAAC,GAAO,OACjB,yBAAKF,UAAU,UAAUG,IAAKD,EAAQE,OAClC,yBAAKJ,UAAU,YACX,yBACIA,UAAU,iBACVK,IAAKH,EAAQI,UACbC,KAAK,eACLC,IAAI,OAGZ,yBAAKR,UAAU,qBACX,gCAASE,EAAQO,MACjB,6BACA,+BAAQP,EAAQE,aCHzBM,EFNC,SAAAC,GAAW,OAAI,SAAAC,GAC7B,mMAEIC,KAAKC,WAAaC,KAAKC,QAF3B,0CAKsBC,GACb3B,EAAQ2B,EAAUN,MACrBE,KAAKK,SAAWH,KAAKC,SAP3B,+BAYI,IAAMG,EAAU,CACdC,cAAeP,KAAKK,SAAWL,KAAKC,YAAc,KAAMO,QAAQ,IAGlE,OAAO/B,EAAQuB,KAAKS,MAAMX,IACxB,yBAAKX,UAAU,WAEf,kBAACY,EAAD,iBAAsBC,KAAKS,MAAWH,QAnB5C,EAAM,CAA0BI,cEKnBb,CAAQ,WAARA,CAXF,SAAAY,GAAU,IACZF,EAAeE,EAAfF,YAEP,OACI,yBAAKpB,UAAU,QACX,kBAAC,EAAD,CAAUD,SAAUuB,EAAMvB,WAC1B,2CAAiBqB,EAAjB,eC8BGI,MAnCf,WAAgB,IAAD,EACmBC,mBAAS,CAAC,KAD7B,mBACN1B,EADM,KACI2B,EADJ,KAmBb,OAhBAC,oBAAU,YACY,sCAAG,sBAAAC,EAAA,qDACrBC,MAAM,yCACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAc,OAClBA,EAAeC,QAAQjC,IAAI,SAAAkC,GAAI,MAAK,CAClC1B,KAAK,GAAD,OAAK0B,EAAK1B,KAAK2B,MAAf,YAAwBD,EAAK1B,KAAK4B,MACtCjC,MAAO+B,EAAK/B,MACZE,UAAW6B,EAAKG,QAAQhC,eAG3BwB,KAAK,SAAA/B,GAAQ,OAAI2B,EAAY3B,KAVT,yCAAH,qDAYpBwC,IACC,IAGD,yBAAKvC,UAAU,OACb,yBAAKwC,MAAM,+CACT,wBAAIA,MAAM,cACR,wBAAIA,MAAM,YACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,mBAMN,kBAAC,EAAD,CAAM1C,SAAUA,MCvBF2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.9f0aaa2a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Loading.css\";\n\nconst isEmpty = prop =>\n  prop === null ||\n  prop === undefined ||\n  (prop.hasOwnProperty(\"length\") && prop.length === 0) ||\n  (prop.constructor === Object && Object.keys(prop).length === 0);\n\nconst Loading = loadingProp => WrappedComponent => {\n  return class LoadingHOC extends Component {\n    componentDidMount() {\n      this.startTimer = Date.now();\n    }\n\n    componentWillUpdate(nextProps) {\n      if (!isEmpty(nextProps[loadingProp])) {\n        this.endTimer = Date.now();\n      }\n    }\n\n    render() {\n      const myProps = {\n        loadingTime: ((this.endTimer - this.startTimer) / 1000).toFixed(2)\n      };\n\n      return isEmpty(this.props[loadingProp]) ? (\n        <div className=\"loader\" />\n      ) : (\n        <WrappedComponent {...this.props} {...myProps} />\n      );\n    }\n  };\n};\n\nexport default Loading;\n","import React from 'react';\n\nconst FeedItem = ({contacts}) => {\n    return (\n        <div className=\"col-sm-4 offset-4\">\n            {contacts.map(contact => (\n                <div className=\"row p-2\" key={contact.email}>\n                    <div className=\"col-sm-2\">\n                        <img\n                            className=\"rounded-circle\"\n                            src={contact.thumbnail}\n                            role=\"presentation\"\n                            alt=\"#\"\n                        />\n                    </div>\n                    <div className=\"feedData col-sm-9\">\n                        <strong>{contact.name}</strong>\n                        <br />\n                        <small>{contact.email}</small>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default FeedItem;","import React from 'react';\nimport Loading from './HOC/Loading';\nimport FeedItem from './FeedItem';\n\nconst Feed = props => {\n    const {loadingTime} = props;\n    \n    return (\n        <div className='feed'>\n            <FeedItem contacts={props.contacts}/>\n            <p>Loading time {loadingTime} seconds</p>\n        </div>\n    )\n}\n\nexport default Loading('contacts')(Feed);","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nimport Feed from './components/Feed';\n\nfunction App() {\n  const [contacts, setContacts] = useState([{}]);\n\n  useEffect(() => {\n    const fetchDataUsers = async () => {\n      fetch(\"https://api.randomuser.me/?results=50\")\n      .then(response => response.json())\n      .then(parsedResponse =>\n        parsedResponse.results.map(user => ({\n          name: `${user.name.first} ${user.name.last}`,\n          email: user.email,\n          thumbnail: user.picture.thumbnail\n        }))\n      )\n      .then(contacts => setContacts(contacts));\n    }\n    fetchDataUsers();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <nav class=\"navbar navbar-expand-sm bg-dark navbar-dark\">\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\">\n              HOC Demo app\n            </a>\n          </li>\n        </ul>\n      </nav>\n      <Feed contacts={contacts}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}